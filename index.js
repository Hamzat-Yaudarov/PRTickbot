const { Telegraf, Markup } = require('telegraf');
const config = require('./config');
const db = require('./database');

class TickPiarBot {
  constructor() {
    this.bot = new Telegraf(config.BOT_TOKEN);
    this.userStates = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.init();
  }

  async init() {
    await db.init();
    this.setupHandlers();
    this.bot.launch();
    console.log('üöÄ TickPiar Bot –∑–∞–ø—É—â–µ–Ω!');
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    this.bot.start(async (ctx) => {
      const userId = ctx.from.id;
      const referralCode = ctx.startPayload; // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ —Å—Å—ã–ª–∫–∏
      
      await this.registerUser(ctx, referralCode);
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', async (ctx) => {
      const data = ctx.callbackQuery.data;
      const userId = ctx.from.id;

      try {
        await ctx.answerCbQuery();
        
        switch (data) {
          case 'main_menu':
            await this.showMainMenu(ctx);
            break;
          case 'earn':
            await this.showEarnMenu(ctx);
            break;
          case 'promote':
            await this.showPromoteMenu(ctx);
            break;
          case 'cabinet':
            await this.showCabinet(ctx);
            break;
          case 'referral':
            await this.showReferralMenu(ctx);
            break;
          case 'create_task':
            await this.startTaskCreation(ctx);
            break;
          default:
            if (data.startsWith('complete_task_')) {
              const taskId = data.split('_')[2];
              await this.handleTaskCompletion(ctx, taskId);
            }
            break;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      const userId = ctx.from.id;
      const userState = this.userStates.get(userId);

      if (userState) {
        await this.handleTaskCreationStep(ctx, userState);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
    this.bot.on('my_chat_member', async (ctx) => {
      const chatMember = ctx.myChatMember;
      const chat = ctx.chat;
      
      if (chatMember.new_chat_member.status === 'member' || chatMember.new_chat_member.status === 'administrator') {
        if (chat.type === 'group' || chat.type === 'supergroup') {
          // –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
          await this.handleBotAddedToGroup(ctx);
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫)
    this.bot.on('new_chat_members', async (ctx) => {
      await this.checkSponsorSubscriptions(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫)
    this.bot.on('message', async (ctx) => {
      if (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup') {
        await this.checkUserCanSendMessage(ctx);
      }
    });
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async registerUser(ctx, referralCode = null) {
    const user = ctx.from;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userReferralCode = this.generateReferralCode(user.id);
    
    const userData = {
      user_id: user.id,
      username: user.username,
      first_name: user.first_name,
      last_name: user.last_name,
      referral_code: userReferralCode
    };

    const createdUser = await db.createUser(userData);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (referralCode && createdUser) {
      await this.processReferralCode(referralCode, user.id);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  async processReferralCode(referralCode, newUserId) {
    try {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
      const result = await db.pool.query('SELECT user_id FROM users WHERE referral_code = $1', [referralCode]);
      
      if (result.rows.length > 0) {
        const referrerId = result.rows[0].user_id;
        if (referrerId !== newUserId) {
          await db.processReferral(referrerId, newUserId);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  generateReferralCode(userId) {
    return `ref_${userId}_${Date.now().toString(36)}`;
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async showMainMenu(ctx) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'earn')],
      [Markup.button.callback('üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å', 'promote')],
      [Markup.button.callback('üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç', 'cabinet')],
      [Markup.button.callback('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'referral')]
    ]);

    if (ctx.callbackQuery) {
      await ctx.editMessageText(config.MESSAGES.START, keyboard);
    } else {
      await ctx.reply(config.MESSAGES.START, keyboard);
    }
  }

  // –ú–µ–Ω—é "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
  async showEarnMenu(ctx) {
    const userId = ctx.from.id;
    const availableTasks = await db.getAvailableTasks(userId);

    if (availableTasks.length === 0) {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      ]);
      
      await ctx.editMessageText(
        'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å\n\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å"!',
        keyboard
      );
      return;
    }

    let message = 'üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n';
    const buttons = [];

    availableTasks.slice(0, 10).forEach((task, index) => {
      message += `${index + 1}. ${task.channel_title || task.channel_username}\n`;
      message += `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} Tick –∫–æ–∏–Ω–æ–≤\n`;
      message += `üìù ${task.description || '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª'}\n\n`;
      
      buttons.push([Markup.button.callback(
        `‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å ${index + 1} (${task.reward} ü™ô)`, 
        `complete_task_${task.task_id}`
      )]);
    });

    buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    await ctx.editMessageText(message, keyboard);
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  async handleTaskCompletion(ctx, taskId) {
    const userId = ctx.from.id;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
      const taskResult = await db.pool.query('SELECT * FROM tasks WHERE task_id = $1', [taskId]);
      if (taskResult.rows.length === 0) {
        await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      const task = taskResult.rows[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
      const isSubscribed = await this.checkChannelSubscription(ctx, task.channel_username);
      
      if (isSubscribed) {
        const completedTask = await db.completeTask(userId, taskId);
        if (completedTask) {
          await ctx.answerCbQuery(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} Tick –∫–æ–∏–Ω–æ–≤`);
          await this.showEarnMenu(ctx);
        } else {
          await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
        }
      } else {
        const subscribeUrl = `https://t.me/${task.channel_username.replace('@', '')}`;
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', subscribeUrl)],
          [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `complete_task_${taskId}`)],
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'earn')]
        ]);
        
        await ctx.editMessageText(
          `üì¢ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n\n` +
          `üîó ${task.channel_username}\n` +
          `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} Tick –∫–æ–∏–Ω–æ–≤\n\n` +
          `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
          keyboard
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
  async checkChannelSubscription(ctx, channelUsername) {
    try {
      const chatMember = await ctx.telegram.getChatMember(channelUsername, ctx.from.id);
      return ['member', 'administrator', 'creator'].includes(chatMember.status);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return false;
    }
  }

  // –ú–µ–Ω—é "–†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å"
  async showPromoteMenu(ctx) {
    const userId = ctx.from.id;
    const user = await db.getUser(userId);
    
    let message = 'üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å\n\n';
    message += '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤!\n\n';
    message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.tick_balance || 0} Tick –∫–æ–∏–Ω–æ–≤\n`;
    message += `üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${config.MIN_TASK_REWARD} –∫–æ–∏–Ω–æ–≤\n`;
    message += `üíµ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${config.MAX_TASK_REWARD} –∫–æ–∏–Ω–æ–≤\n\n`;
    message += '‚ö†Ô∏è –ù–∞–≥—Ä–∞–¥–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.';

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'create_task')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.editMessageText(message, keyboard);
  }

  // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  async startTaskCreation(ctx) {
    const userId = ctx.from.id;
    const user = await db.getUser(userId);

    if (!user || user.tick_balance < config.MIN_TASK_REWARD) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
      return;
    }

    this.userStates.set(userId, {
      step: 'channel_username',
      taskData: {}
    });

    const message = 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n' +
      '–®–∞–≥ 1/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞\n\n' +
      'üí° –ü—Ä–∏–º–µ—Ä: @mychannel –∏–ª–∏ @mychat\n' +
      '‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∫–∞–Ω–∞–ª/—á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!';

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promote')]
    ]);

    await ctx.editMessageText(message, keyboard);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  async handleTaskCreationStep(ctx, userState) {
    const userId = ctx.from.id;
    const text = ctx.message.text;

    try {
      switch (userState.step) {
        case 'channel_username':
          await this.handleChannelUsernameStep(ctx, userState, text);
          break;
        case 'reward':
          await this.handleRewardStep(ctx, userState, text);
          break;
        case 'description':
          await this.handleDescriptionStep(ctx, userState, text);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      this.userStates.delete(userId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ username –∫–∞–Ω–∞–ª–∞
  async handleChannelUsernameStep(ctx, userState, text) {
    const userId = ctx.from.id;
    
    if (!text.startsWith('@')) {
      await ctx.reply('‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n–ü—Ä–∏–º–µ—Ä: @mychannel');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ
    try {
      const botMember = await ctx.telegram.getChatMember(text, ctx.botInfo.id);
      if (!['administrator', 'creator'].includes(botMember.status)) {
        await ctx.reply('‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ!\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
      const chat = await ctx.telegram.getChat(text);
      
      userState.taskData.channel_username = text;
      userState.taskData.channel_title = chat.title;
      userState.step = 'reward';

      const message = 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n' +
        '–®–∞–≥ 2/4: –£–∫–∞–∂–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n' +
        `üí∞ –û—Ç ${config.MIN_TASK_REWARD} –¥–æ ${config.MAX_TASK_REWARD} Tick –∫–æ–∏–Ω–æ–≤\n` +
        `üì¢ –ö–∞–Ω–∞–ª: ${chat.title} (${text})`;

      await ctx.reply(message);
      this.userStates.set(userId, userState);
      
    } catch (error) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã
  async handleRewardStep(ctx, userState, text) {
    const userId = ctx.from.id;
    const reward = parseInt(text);

    if (isNaN(reward) || reward < config.MIN_TASK_REWARD || reward > config.MAX_TASK_REWARD) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã.\n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${config.MIN_TASK_REWARD} –¥–æ ${config.MAX_TASK_REWARD}`);
      return;
    }

    const user = await db.getUser(userId);
    if (user.tick_balance < reward) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!');
      return;
    }

    userState.taskData.reward = reward;
    userState.step = 'description';

    const message = 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n' +
      '–®–∞–≥ 3/4: –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n' +
      'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"\n' +
      '–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ';

    await ctx.reply(message);
    this.userStates.set(userId, userState);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
  async handleDescriptionStep(ctx, userState, text) {
    const userId = ctx.from.id;
    
    if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      userState.taskData.description = text;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    const taskData = {
      creator_id: userId,
      ...userState.taskData
    };

    const task = await db.createTask(taskData);
    
    if (task) {
      // –°–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å –±–∞–ª–∞–Ω—Å–∞
      await db.updateBalance(userId, -task.reward);
      
      const message = '‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n' +
        `üì¢ –ö–∞–Ω–∞–ª: ${task.channel_title}\n` +
        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} Tick –∫–æ–∏–Ω–æ–≤\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}\n\n` +
        '–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å" –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!';

      await ctx.reply(message);
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    this.userStates.delete(userId);
  }

  // –ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showCabinet(ctx) {
    const userId = ctx.from.id;
    const stats = await db.getUserStats(userId);
    
    if (!stats) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    const message = 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\n\n' +
      `üí∞ –ë–∞–ª–∞–Ω—Å: ${stats.balance} Tick –∫–æ–∏–Ω–æ–≤\n` +
      `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${stats.completed_tasks}\n` +
      `üì¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${stats.created_tasks}\n` +
      `üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.referrals}\n\n` +
      `üë§ –í–∞—à ID: ${userId}`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.editMessageText(message, keyboard);
  }

  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  async showReferralMenu(ctx) {
    const userId = ctx.from.id;
    const user = await db.getUser(userId);
    
    if (!user) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    const referralLink = `https://t.me/${config.BOT_USERNAME}?start=${user.referral_code}`;
    
    const message = 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n' +
      `üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ${config.REFERRAL_BONUS} Tick –∫–æ–∏–Ω–æ–≤!\n\n` +
      'üì§ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n' +
      `${referralLink}\n\n` +
      'üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º. –ö–æ–≥–¥–∞ –æ–Ω–∏ –∑–∞–ø—É—Å—Ç—è—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!';

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `https://t.me/share/url?url=${encodeURIComponent(referralLink)}`)],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.editMessageText(message, keyboard);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
  async handleBotAddedToGroup(ctx) {
    const chat = ctx.chat;
    const addedBy = ctx.from;

    const welcomeMessage = 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø TickPiar Bot!\n\n' +
      'üõ°Ô∏è –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n' +
      'üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n\n' +
      '‚öôÔ∏è –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é: @your_username';

    await ctx.reply(welcomeMessage);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async checkSponsorSubscriptions(ctx) {
    const chatId = ctx.chat.id;
    const newMembers = ctx.message.new_chat_members;

    const sponsorChannels = await db.getSponsorChannels(chatId);
    
    if (sponsorChannels.length === 0) return;

    for (const member of newMembers) {
      if (member.is_bot) continue;

      let hasAllSubscriptions = true;
      const missingChannels = [];

      for (const sponsor of sponsorChannels) {
        try {
          const chatMember = await ctx.telegram.getChatMember(sponsor.channel_username, member.id);
          if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {
            hasAllSubscriptions = false;
            missingChannels.push(sponsor.channel_username);
          }
        } catch (error) {
          hasAllSubscriptions = false;
          missingChannels.push(sponsor.channel_username);
        }
      }

      if (!hasAllSubscriptions) {
        try {
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await ctx.telegram.restrictChatMember(chatId, member.id, {
            can_send_messages: false,
            can_send_media_messages: false,
            can_send_polls: false,
            can_send_other_messages: false,
            can_add_web_page_previews: false,
            can_change_info: false,
            can_invite_users: false,
            can_pin_messages: false
          });

          const message = `üëã @${member.username || member.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n` +
            'üîí –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:\n' +
            missingChannels.map(ch => `üì¢ ${ch}`).join('\n') + '\n\n' +
            '‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.';

          await ctx.reply(message);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  async checkUserCanSendMessage(ctx) {
    const chatId = ctx.chat.id;
    const userId = ctx.from.id;
    const sponsorChannels = await db.getSponsorChannels(chatId);

    if (sponsorChannels.length === 0) return;

    let hasAllSubscriptions = true;
    
    for (const sponsor of sponsorChannels) {
      try {
        const chatMember = await ctx.telegram.getChatMember(sponsor.channel_username, userId);
        if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {
          hasAllSubscriptions = false;
          break;
        }
      } catch (error) {
        hasAllSubscriptions = false;
        break;
      }
    }

    if (!hasAllSubscriptions) {
      try {
        await ctx.deleteMessage();
        
        const warning = await ctx.reply(
          `‚ö†Ô∏è @${ctx.from.username || ctx.from.first_name}, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ!`,
          { reply_to_message_id: ctx.message.message_id }
        );

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          ctx.telegram.deleteMessage(chatId, warning.message_id).catch(() => {});
        }, 10000);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
  }

  stop() {
    this.bot.stop('SIGINT');
    this.bot.stop('SIGTERM');
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new TickPiarBot();

// Graceful shutdown
process.once('SIGINT', () => bot.stop());
process.once('SIGTERM', () => bot.stop());
