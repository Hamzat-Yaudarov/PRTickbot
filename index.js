const { Telegraf, Markup } = require('telegraf');
const config = require('./config');
const db = require('./database');

class TickPiarBot {
  constructor() {
    this.bot = new Telegraf(config.BOT_TOKEN);
    this.userStates = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.userCache = new Map(); // –ö—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.taskCache = new Map(); // –ö—ç—à –¥–ª—è –∑–∞–¥–∞–Ω–∏–π

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.userCache.clear();
      this.taskCache.clear();
    }, 5 * 60 * 1000);

    this.init();
  }

  setupErrorHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegraf
    this.bot.catch((err, ctx) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegraf:', err);

      if (ctx && ctx.reply) {
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±ÔøΩÔøΩ–π—Ç–µ –ø–æ–∑–∂–µ.')
          .catch(e => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e));
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Node.js
    process.on('uncaughtException', (error) => {
      console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    });
  }

  async init() {
    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');

      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.init();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–ΩÔøΩÔøΩ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupHandlers();
      this.setupErrorHandlers();

      // Graceful shutdown handling
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));

      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 409 –æ—à–∏–±–∫–∏
      await this.launchWithRetry();

      console.log('‚úÖ TickPiar Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }

  async launchWithRetry(maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        await this.bot.launch();
        return; // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
      } catch (error) {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${attempt}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);

        if (error.response && error.response.error_code === 409) {
          console.log('‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç (409). –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞...');

          // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ãÔøΩÔøΩ–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
          const delay = Math.min(1000 * Math.pow(2, attempt - 1), 10000);
          await new Promise(resolve => setTimeout(resolve, delay));

          if (attempt === maxRetries) {
            console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω.');
            throw error;
          }
        } else {
          // –î–ª—è –¥—ÄÔøΩÔøΩ–≥–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
          throw error;
        }
      }
    }
  }

  async stop(signal) {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...`);
    try {
      if (this.bot) {
        await this.bot.stop(signal);
      }
      console.log('‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    this.bot.start(async (ctx) => {
      const userId = ctx.from.id;
      const referralCode = ctx.startPayload; // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ —Å—Å—ã–ª–∫–∏
      
      await this.registerUser(ctx, referralCode);
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', async (ctx) => {
      const data = ctx.callbackQuery.data;
      const userId = ctx.from.id;

      try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±—ã—Å—Ç—Ä–æ
        await ctx.answerCbQuery();

        // –î–æ–±–∞–≤–ª—è–µ–º ÔøΩÔøΩ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        let processingMsg = null;
        if (['cabinet', 'referral', 'earn', 'create_task'].includes(data)) {
          try {
            processingMsg = await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...');
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
          }
        }

        console.log(`üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        switch (data) {
          case 'main_menu':
            await this.showMainMenu(ctx);
            break;
          case 'earn':
            await this.showEarnMenu(ctx);
            break;
          case 'promote':
            await this.showPromoteMenu(ctx);
            break;
          case 'cabinet':
            await this.showCabinet(ctx);
            break;
          case 'referral':
            await this.showReferralMenu(ctx);
            break;
          case 'create_task':
            await this.startTaskCreation(ctx);
            break;
          default:
            if (data.startsWith('complete_task_')) {
              const taskId = data.split('_')[2];
              await this.handleTaskCompletion(ctx, taskId);
            } else {
              console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: ${data}`);
            }
            break;
        }

        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if (processingMsg) {
          try {
            await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id);
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
            console.log('–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          }
        }

        console.log(`‚úÖ Callback ${data} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback '${data}':`, error);

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        const errorMsg = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start';

        try {
          if (ctx.callbackQuery) {
            await ctx.answerCbQuery(errorMsg, { show_alert: true });
          }
        } catch (cbError) {
          console.error('–û—à–∏–±–∫–∞ answerCbQuery:', cbError);
        }

        try {
          await ctx.reply(errorMsg);
        } catch (replyError) {
          console.error('–û—àÔøΩÔøΩ–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', replyError);
        }
      }
    });

    // –û–±—Ä–∞–±ÔøΩÔøΩ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      const userId = ctx.from.id;
      const userState = this.userStates.get(userId);

      if (userState) {
        await this.handleTaskCreationStep(ctx, userState);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
    this.bot.on('my_chat_member', async (ctx) => {
      const chatMember = ctx.myChatMember;
      const chat = ctx.chat;
      
      if (chatMember.new_chat_member.status === 'member' || chatMember.new_chat_member.status === 'administrator') {
        if (chat.type === 'group' || chat.type === 'supergroup') {
          // –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
          await this.handleBotAddedToGroup(ctx);
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ãÔøΩÔøΩ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫)
    this.bot.on('new_chat_members', async (ctx) => {
      await this.checkSponsorSubscriptions(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—ÅÔøΩÔøΩ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫)
    this.bot.on('message', async (ctx) => {
      if (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup') {
        await this.checkUserCanSendMessage(ctx);
      }
    });
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async registerUser(ctx, referralCode = null) {
    const user = ctx.from;
    console.log(`üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${user.first_name} ${user.last_name || ''}`);

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userReferralCode = this.generateReferralCode(user.id);

      const userData = {
        user_id: user.id,
        username: user.username,
        first_name: user.first_name,
        last_name: user.last_name,
        referral_code: userReferralCode
      };

      console.log('üíæ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const createdUser = await db.createUser(userData);

      if (!createdUser) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return null;
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (referralCode && createdUser) {
        console.log(`üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
        await this.processReferralCode(referralCode, user.id);
      }

      return createdUser;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  async processReferralCode(referralCode, newUserId) {
    try {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
      const result = await db.pool.query('SELECT user_id FROM users WHERE referral_code = $1', [referralCode]);
      
      if (result.rows.length > 0) {
        const referrerId = result.rows[0].user_id;
        if (referrerId !== newUserId) {
          await db.processReferral(referrerId, newUserId);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  generateReferralCode(userId) {
    return `ref_${userId}_${Date.now().toString(36)}`;
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async showMainMenu(ctx) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'earn')],
      [Markup.button.callback('üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å', 'promote')],
      [Markup.button.callback('ÔøΩÔøΩÔøΩÔøΩ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç', 'cabinet')],
      [Markup.button.callback('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'referral')]
    ]);

    if (ctx.callbackQuery) {
      await ctx.editMessageText(config.MESSAGES.START, keyboard);
    } else {
      await ctx.reply(config.MESSAGES.START, keyboard);
    }
  }

  // –ú–µ–Ω—é "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
  async showEarnMenu(ctx) {
    try {
      const userId = ctx.from.id;
      console.log(`üí∞ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      console.log('üìã –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è...');
      const availableTasks = await Promise.race([
        db.getAvailableTasks(userId, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Database timeout')), 5000)
        )
      ]);

      if (availableTasks.length === 0) {
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'earn')],
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
        ]);

        const message = 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å\n\n‚ùå –ù–µ—Ç ÔøΩÔøΩ–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥ÔøΩÔøΩ–ª–µ "–†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å"!';

        if (ctx.callbackQuery) {
          await ctx.editMessageText(message, keyboard);
        } else {
          await ctx.reply(message, keyboard);
        }
        return;
      }

      let message = 'üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n';
      const buttons = [];

      availableTasks.forEach((task, index) => {
        const title = task.channel_title || task.channel_username;
        const shortTitle = title.length > 25 ? title.substring(0, 25) + '...' : title;

        message += `${index + 1}. ${shortTitle}\n`;
        message += `üí∞ ${task.reward} –∫–æ–∏–Ω–æ–≤ | üë• ${task.completed_count}/${task.max_completions}\n`;
        if (task.description && task.description.length > 0) {
          const desc = task.description.length > 30 ? task.description.substring(0, 30) + '...' : task.description;
          message += `üìù ${desc}\n`;
        }
        message += '\n';

        buttons.push([Markup.button.callback(
          `‚úÖ ${index + 1} ‚Üí ${task.reward} ü™ô`,
          `complete_task_${task.task_id}`
        )]);
      });

      buttons.push(
        [Markup.button.callback('ÔøΩÔøΩ –û–±–Ω–æ–≤–∏—Ç—å', 'earn')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      );

      const keyboard = Markup.inlineKeyboard(buttons);

      console.log(`üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ ${availableTasks.length} –∑–∞–¥–∞–Ω–∏–π`);

      if (ctx.callbackQuery) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const currentMessage = ctx.callbackQuery.message?.text;
        if (currentMessage && currentMessage === message) {
          console.log('‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
          await ctx.answerCbQuery('‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∞–∫—Ç—É–∞–ª–µ–Ω');
          return;
        }

        await ctx.editMessageText(message, keyboard);
      } else {
        await ctx.reply(message, keyboard);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
      const errorKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'earn')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';

      if (ctx.callbackQuery) {
        await ctx.editMessageText(errorMessage, errorKeyboard);
      } else {
        await ctx.reply(errorMessage, errorKeyboard);
      }
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  async handleTaskCompletion(ctx, taskId) {
    const userId = ctx.from.id;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
      const taskResult = await db.pool.query('SELECT * FROM tasks WHERE task_id = $1', [taskId]);
      if (taskResult.rows.length === 0) {
        await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–πÔøΩÔøΩ–µ–Ω–æ');
        return;
      }

      const task = taskResult.rows[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const isSubscribed = await Promise.race([
        this.checkChannelSubscription(ctx, task.channel_username),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Subscription check timeout')), 5000)
        )
      ]).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return false;
      });
      
      if (isSubscribed) {
        const completedTask = await db.completeTask(userId, taskId);
        if (completedTask) {
          await ctx.answerCbQuery(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} Tick –∫–æ–∏–Ω–æ–≤`);
          await this.showEarnMenu(ctx);
        } else {
          await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
        }
      } else {
        const subscribeUrl = `https://t.me/${task.channel_username.replace('@', '')}`;
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', subscribeUrl)],
          [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `complete_task_${taskId}`)],
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'earn')]
        ]);
        
        await ctx.editMessageText(
          `üì¢ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n\n` +
          `üîó ${task.channel_username}\n` +
          `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} Tick –∫–æ–∏–Ω–æ–≤\n\n` +
          `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
          keyboard
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
  async checkChannelSubscription(ctx, channelUsername) {
    try {
      const cacheKey = `${ctx.from.id}_${channelUsername}`;
      const cached = this.userCache.get(cacheKey);

      // –ö—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
      if (cached && Date.now() - cached.timestamp < 30000) {
        return cached.subscribed;
      }

      const chatMember = await Promise.race([
        ctx.telegram.getChatMember(channelUsername, ctx.from.id),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Timeout')), 3000)
        )
      ]);

      const subscribed = ['member', 'administrator', 'creator'].includes(chatMember.status);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.userCache.set(cacheKey, {
        subscribed,
        timestamp: Date.now()
      });

      return subscribed;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return false;
    }
  }

  // –ú–µ–Ω—é "–†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å"
  async showPromoteMenu(ctx) {
    const userId = ctx.from.id;
    const user = await db.getUser(userId);
    
    let message = 'üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å\n\n';
    message += '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤!\n\n';
    message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.tick_balance || 0} Tick –∫–æ–∏–Ω–æ–≤\n`;
    message += `üíµ ÔøΩÔøΩ–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${config.MIN_TASK_REWARD} –∫–æ–∏–Ω–æ–≤\n`;
    message += `üíµ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${config.MAX_TASK_REWARD} –∫–æ–∏–Ω–æ–≤\n\n`;
    message += '‚ö†Ô∏è –ù–∞–≥—Ä–∞–¥–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.';

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'create_task')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.editMessageText(message, keyboard);
  }

  // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  async startTaskCreation(ctx) {
    try {
      const userId = ctx.from.id;
      console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const user = await Promise.race([
        db.getUser(userId),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Timeout')), 3000)
        )
      ]);

      console.log(`üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, user ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã');

      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        const errorMsg = '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start';

        if (ctx.callbackQuery) {
          await ctx.answerCbQuery(errorMsg);
          await ctx.editMessageText(errorMsg, Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ]));
        } else {
          await ctx.reply(errorMsg);
        }
        return;
      }

      const minBalance = config.MIN_TASK_REWARD || 15;
      console.log(`üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å: ${user.tick_balance} >= ${minBalance}`);

      if (user.tick_balance < minBalance) {
        const errorMsg = `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ÔøΩÔøΩ—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è\nüí∞ –ë–∞–ª–∞–Ω—Å: ${user.tick_balance} –¢–∏–∫ –∫–æ–∏–Ω–æ–≤\nüìä –ù—É–∂–Ω–æ: ${minBalance} –¢–∏–∫ –∫–æ–∏–Ω–æ–≤`;

        console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${user.tick_balance} < ${minBalance}`);

        if (ctx.callbackQuery) {
          await ctx.answerCbQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
          await ctx.editMessageText(errorMsg, Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ]));
        } else {
          await ctx.reply(errorMsg);
        }
        return;
      }

      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π, —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

      this.userStates.set(userId, {
        step: 'channel_username',
        taskData: {}
      });

      const message = 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n' +
        '–®–∞–≥ 1/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞\n\n' +
        'üí° –ü—Ä–∏–º–µ—Ä: @mychannel –∏–ª–∏ @mychat\n' +
        '‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∫–∞–Ω–∞–ª/—á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!';

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promote')]
      ]);

      console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');

      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, keyboard);
      } else {
        await ctx.reply(message, keyboard);
      }

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ startTaskCreation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);

      const errorMsg = '‚ùå –û—àÔøΩÔøΩ–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
        '1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n' +
        '2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n' +
        '3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É';

      try {
        if (ctx.callbackQuery) {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
          await ctx.editMessageText(errorMsg, Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'create_task')]
          ]));
        } else {
          await ctx.reply(errorMsg);
        }
      } catch (sendError) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  async handleTaskCreationStep(ctx, userState) {
    const userId = ctx.from.id;
    const text = ctx.message.text;

    try {
      switch (userState.step) {
        case 'channel_username':
          await this.handleChannelUsernameStep(ctx, userState, text);
          break;
        case 'reward':
          await this.handleRewardStep(ctx, userState, text);
          break;
        case 'description':
          await this.handleDescriptionStep(ctx, userState, text);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      this.userStates.delete(userId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ username –∫–∞–Ω–∞–ª–∞
  async handleChannelUsernameStep(ctx, userState, text) {
    const userId = ctx.from.id;
    
    if (!text.startsWith('@')) {
      await ctx.reply('‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n–ü—Ä–∏–º–µ—Ä: @mychannel');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ
    try {
      const botMember = await ctx.telegram.getChatMember(text, ctx.botInfo.id);
      if (!['administrator', 'creator'].includes(botMember.status)) {
        await ctx.reply('‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ!\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
      const chat = await ctx.telegram.getChat(text);
      
      userState.taskData.channel_username = text;
      userState.taskData.channel_title = chat.title;
      userState.step = 'reward';

      const message = 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n' +
        '–®–∞–≥ 2/4: –£–∫–∞–∂–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n' +
        `üí∞ –û—Ç ${config.MIN_TASK_REWARD} –¥–æ ${config.MAX_TASK_REWARD} Tick –∫–æ–∏–Ω–æ–≤\n` +
        `ÔøΩÔøΩÔøΩ –ö–∞–Ω–∞–ª: ${chat.title} (${text})`;

      await ctx.reply(message);
      this.userStates.set(userId, userState);
      
    } catch (error) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã
  async handleRewardStep(ctx, userState, text) {
    const userId = ctx.from.id;
    const reward = parseInt(text);

    if (isNaN(reward) || reward < config.MIN_TASK_REWARD || reward > config.MAX_TASK_REWARD) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã.\n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${config.MIN_TASK_REWARD} –¥–æ ${config.MAX_TASK_REWARD}`);
      return;
    }

    const user = await db.getUser(userId);
    if (user.tick_balance < reward) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—áÔøΩÔøΩ–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!');
      return;
    }

    userState.taskData.reward = reward;
    userState.step = 'description';

    const message = 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n' +
      '–®–∞–≥ 3/4: –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n' +
      'üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"\n' +
      '–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—ÇÔøΩÔøΩ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ';

    await ctx.reply(message);
    this.userStates.set(userId, userState);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
  async handleDescriptionStep(ctx, userState, text) {
    const userId = ctx.from.id;
    
    if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      userState.taskData.description = text;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    const taskData = {
      creator_id: userId,
      ...userState.taskData
    };

    const task = await db.createTask(taskData);
    
    if (task) {
      // –°–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å –±–∞–ª–∞–Ω—Å–∞
      await db.updateBalance(userId, -task.reward);
      
      const message = '‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n' +
        `üì¢ –ö–∞–Ω–∞–ª: ${task.channel_title}\n` +
        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} Tick –∫–æ–∏–Ω–æ–≤\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}\n\n` +
        '–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å" ÔøΩÔøΩÔøΩ–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!';

      await ctx.reply(message);
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    this.userStates.delete(userId);
  }

  // –ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showCabinet(ctx) {
    try {
      const userId = ctx.from.id;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      let stats = null;
      let attempts = 0;
      const maxAttempts = 3;

      while (!stats && attempts < maxAttempts) {
        try {
          attempts++;
          stats = await Promise.race([
            db.getUserStats(userId),
            new Promise((_, reject) =>
              setTimeout(() => reject(new Error('Timeout')), 3000)
            )
          ]);

          if (stats) break;

        } catch (error) {
          console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts} –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
          if (attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞ 500–º—Å
          }
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–ºÔøΩÔøΩ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      if (!stats) {
        stats = {
          balance: 0,
          completed_tasks: 0,
          created_tasks: 0,
          referrals: 0
        };
      }

      const message = 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\n\n' +
        `üí∞ –ë–∞–ª–∞–Ω—Å: ${stats.balance} Tick –∫–æ–∏–Ω–æ–≤\n` +
        `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${stats.completed_tasks}\n` +
        `üì¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${stats.created_tasks}\n` +
        `üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.referrals}\n\n` +
        `üë§ –í–∞—à ID: ${userId}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'cabinet')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

      if (ctx.callbackQuery) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const currentMessage = ctx.callbackQuery.message?.text;
        if (currentMessage && currentMessage === message) {
          console.log('‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          await ctx.answerCbQuery('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
          return;
        }

        await ctx.editMessageText(message, keyboard);
      } else {
        await ctx.reply(message, keyboard);
      }
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–±–∏–Ω–µ—Ç–∞:', error);
      const errorKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'cabinet')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';

      try {
        if (ctx.callbackQuery) {
          await ctx.editMessageText(errorMessage, errorKeyboard);
        } else {
          await ctx.reply(errorMessage, errorKeyboard);
        }
      } catch (sendError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–øÔøΩÔøΩ–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
      }
    }
  }

  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  async showReferralMenu(ctx) {
    try {
      const userId = ctx.from.id;

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let user = null;
      let stats = null;
      let attempts = 0;
      const maxAttempts = 3;

      while ((!user || !stats) && attempts < maxAttempts) {
        try {
          attempts++;

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
          const [userData, userStats] = await Promise.all([
            Promise.race([
              db.getUser(userId),
              new Promise((_, reject) =>
                setTimeout(() => reject(new Error('User timeout')), 3000)
              )
            ]),
            Promise.race([
              db.getUserStats(userId),
              new Promise((_, reject) =>
                setTimeout(() => reject(new Error('Stats timeout')), 3000)
              )
            ])
          ]);

          user = userData;
          stats = userStats;

          if (user && stats) break;

        } catch (error) {
          console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts} –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:`, error);
          if (attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞ 500–º—Å
          }
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏ÔøΩÔøΩ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!user) {
        user = {
          referral_code: `temp_${userId}_${Date.now()}`
        };
      }

      if (!stats) {
        stats = {
          referrals: 0
        };
      }

      const referralLink = `https://t.me/${config.BOT_USERNAME}?start=${user.referral_code}`;
      const referralCount = stats.referrals || 0;
      const totalEarned = referralCount * config.REFERRAL_BONUS;

      const message = 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n' +
        `üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: ${config.REFERRAL_BONUS} Tick –∫–æ–∏–Ω–æ–≤\n` +
        `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralCount} —á–µ–ª–æ–≤–µ–∫\n` +
        `üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalEarned} –∫–æ–∏–Ω–æ–≤\n\n` +
        'üì§ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ÔøΩÔøΩ —Å—Å—ã–ª–∫–∞:\n' +
        `\`${referralLink}\`\n\n` +
        'üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!';

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('ü§ñ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ TickPiar Bot –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π Tick –∫–æ–∏–Ω—ã!')}`)],
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'referral')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, keyboard);
      } else {
        await ctx.reply(message, keyboard);
      }
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
      const errorKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'referral')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')]
      ]);

      const errorMessage = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';

      try {
        if (ctx.callbackQuery) {
          await ctx.editMessageText(errorMessage, errorKeyboard);
        } else {
          await ctx.reply(errorMessage, errorKeyboard);
        }
      } catch (sendError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
  async handleBotAddedToGroup(ctx) {
    const chat = ctx.chat;
    const addedBy = ctx.from;

    const welcomeMessage = 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø TickPiar Bot!\n\n' +
      'üõ°Ô∏è –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—âÔøΩÔøΩ–Ω–∏—è–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n' +
      'üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—ÅÔøΩÔøΩ–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n\n' +
      '‚öôÔ∏è –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é: @your_username';

    await ctx.reply(welcomeMessage);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async checkSponsorSubscriptions(ctx) {
    const chatId = ctx.chat.id;
    const newMembers = ctx.message.new_chat_members;

    const sponsorChannels = await db.getSponsorChannels(chatId);
    
    if (sponsorChannels.length === 0) return;

    for (const member of newMembers) {
      if (member.is_bot) continue;

      let hasAllSubscriptions = true;
      const missingChannels = [];

      for (const sponsor of sponsorChannels) {
        try {
          const chatMember = await ctx.telegram.getChatMember(sponsor.channel_username, member.id);
          if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {
            hasAllSubscriptions = false;
            missingChannels.push(sponsor.channel_username);
          }
        } catch (error) {
          hasAllSubscriptions = false;
          missingChannels.push(sponsor.channel_username);
        }
      }

      if (!hasAllSubscriptions) {
        try {
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await ctx.telegram.restrictChatMember(chatId, member.id, {
            can_send_messages: false,
            can_send_media_messages: false,
            can_send_polls: false,
            can_send_other_messages: false,
            can_add_web_page_previews: false,
            can_change_info: false,
            can_invite_users: false,
            can_pin_messages: false
          });

          const message = `üëã @${member.username || member.first_name}, –¥–æÔøΩÔøΩ—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n` +
            'üîí –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:\n' +
            missingChannels.map(ch => `ÔøΩÔøΩÔøΩÔøΩ ${ch}`).join('\n') + '\n\n' +
            '‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.';

          await ctx.reply(message);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  async checkUserCanSendMessage(ctx) {
    const chatId = ctx.chat.id;
    const userId = ctx.from.id;
    const sponsorChannels = await db.getSponsorChannels(chatId);

    if (sponsorChannels.length === 0) return;

    let hasAllSubscriptions = true;
    
    for (const sponsor of sponsorChannels) {
      try {
        const chatMember = await ctx.telegram.getChatMember(sponsor.channel_username, userId);
        if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {
          hasAllSubscriptions = false;
          break;
        }
      } catch (error) {
        hasAllSubscriptions = false;
        break;
      }
    }

    if (!hasAllSubscriptions) {
      try {
        await ctx.deleteMessage();
        
        const warning = await ctx.reply(
          `‚ö†Ô∏è @${ctx.from.username || ctx.from.first_name}, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ!`,
          { reply_to_message_id: ctx.message.message_id }
        );

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          ctx.telegram.deleteMessage(chatId, warning.message_id).catch(() => {});
        }, 10000);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
  }

  stop() {
    this.bot.stop('SIGINT');
    this.bot.stop('SIGTERM');
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new TickPiarBot();

// Graceful shutdown
process.once('SIGINT', () => bot.stop());
process.once('SIGTERM', () => bot.stop());
